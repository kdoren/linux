diff --git a/sound/usb/mixer_scarlett_gen2.c b/sound/usb/mixer_scarlett_gen2.c
index e1f07827cc50..1f9b3593a60f 100644
--- a/sound/usb/mixer_scarlett_gen2.c
+++ b/sound/usb/mixer_scarlett_gen2.c
@@ -229,7 +229,7 @@ static const u16 scarlett2_sw_config_mixer_values[173] = {
 
 #define SCARLETT2_SW_CONFIG_BASE                 0xec
 
-#define SCARLETT2_SW_CONFIG_PACKET_SIZE          992      /* The maximum packet size used to transfer data */
+#define SCARLETT2_SW_CONFIG_PACKET_SIZE          1024     /* The maximum packet size used to transfer data */
 
 #define SCARLETT2_SW_CONFIG_MIXER_INPUTS         30       /* 30 inputs per one mixer in config */
 #define SCARLETT2_SW_CONFIG_MIXER_OUTPUTS        12       /* 12 outputs in config */
@@ -708,10 +708,6 @@ static const struct scarlett2_device_info s18i8_gen2_info = {
 		},
 		[SCARLETT2_PORT_TYPE_SPDIF] = {
 			.id = SCARLETT2_PORT_ID_SPDIF,
-			/* S/PDIF outputs aren't available at 192kHz
-			 * but are included in the USB mux I/O
-			 * assignment message anyway
-			 */
 			.num = { 2, 2, 2, 2, 2 },
 			.src_descr = "S/PDIF In %d",
 			.src_num_offset = 1,
@@ -804,7 +800,7 @@ static const struct scarlett2_device_info s18i20_gen2_info = {
 			.dst_descr = "Analogue Out %02d"
 		},
 		[SCARLETT2_PORT_TYPE_SPDIF] = {
-			/* S/PDIF outputs aren't available at 192kHz
+			/* S/PDIF outputs aren't available at 192KHz
 			 * but are included in the USB mux I/O
 			 * assignment message anyway
 			 */
@@ -1163,7 +1159,7 @@ static const struct scarlett2_sw_port_mapping s18i8_gen3_sw_port_mapping[] = {
 	{ -1, -1, -1, -1}
 };
 
-static const u8 s18i8_analogue_out_remapping[8] = { 0, 1, 6, 7, 2, 3, 4, 5 };
+static const u8 s18i8_analogue_out_remapping[8] = { 0, 1, 4, 5, 6, 7, 2, 3 };
 
 static const struct scarlett2_device_info s18i8_gen3_info = {
 	.usb_id = USB_ID(0x1235, 0x8214),
@@ -1815,7 +1811,7 @@ static int scarlett2_usb(
 	struct usb_device *dev = mixer->chip->dev;
 	u16 req_buf_size = sizeof(struct scarlett2_usb_packet) + req_size;
 	u16 resp_buf_size = sizeof(struct scarlett2_usb_packet) + resp_size;
-	struct scarlett2_usb_packet *req, *resp = NULL;
+	struct scarlett2_usb_packet *req = NULL, *resp = NULL;
 	int err;
 
 	req = kmalloc(req_buf_size, GFP_KERNEL);
@@ -2007,11 +2003,18 @@ static int scarlett2_usb_set(
 	struct {
 		__le32 offset;
 		__le32 size;
-		u8 data[SCARLETT2_SW_CONFIG_PACKET_SIZE];
-	} __packed req;
+		u8 data[];
+	} __packed *req;
 	int i, chunk, err = 0;
 	const u8 *buf = (const u8 *)data;
 
+	/* Allocate buffer */
+	req = kmalloc(sizeof(__le32)*2 + SCARLETT2_SW_CONFIG_PACKET_SIZE, GFP_KERNEL);
+	if (!req) {
+		err = -ENOMEM;
+		goto error;
+	}
+
 	/* Transfer the configuration with fixed-size data chunks */
 	for (i=0; i<bytes; i += chunk) {
 		/* Compute the chunk size */
@@ -2020,15 +2023,17 @@ static int scarlett2_usb_set(
 			chunk = SCARLETT2_SW_CONFIG_PACKET_SIZE;
 
 		/* Send yet another chunk of data */
-		req.offset = cpu_to_le32(offset + i);
-		req.size   = cpu_to_le32(chunk);
-		memcpy(req.data, &buf[i], chunk);
+		req->offset = cpu_to_le32(offset + i);
+		req->size   = cpu_to_le32(chunk);
+		memcpy(req->data, &buf[i], chunk);
 
-		err = scarlett2_usb(mixer, SCARLETT2_USB_SET_DATA, &req, chunk + sizeof(__le32)*2, NULL, 0);
+		err = scarlett2_usb(mixer, SCARLETT2_USB_SET_DATA, req, chunk + sizeof(__le32)*2, NULL, 0);
 		if (err < 0)
-			return err;
+			goto error;
 	}
 
+error:
+	kfree(req);
 	return err;
 }
 
@@ -4952,25 +4957,25 @@ static void scarlett2_mixer_interrupt(struct urb *urb)
 	int ustatus = urb->status;
 
 	if (ustatus != 0)
-		goto requeue;
+			goto requeue;
 
 	if (len == 8) {
-		u32 data = le32_to_cpu(*(__le32 *)urb->transfer_buffer);
-
-		/* Notify clients about changes */
-		if (data & SCARLETT2_USB_INTERRUPT_VOL_CHANGE)
-			scarlett2_mixer_interrupt_vol_change(mixer);
-		if (data & SCARLETT2_USB_INTERRUPT_LINE_CTL_CHANGE)
-			scarlett2_mixer_interrupt_line_in_ctl_change(mixer);
-		if (data & SCARLETT2_USB_INTERRUPT_BUTTON_CHANGE)
-			scarlett2_mixer_interrupt_button_change(mixer);
-		if (data & SCARLETT2_USB_INTERRUPT_SPEAKER_CHANGE) {
-			scarlett2_mixer_interrupt_speaker_change(mixer);
-			scarlett2_mixer_interrupt_vol_change(mixer);
-			scarlett2_mixer_interrupt_button_change(mixer);
-		}
+			u32 data = le32_to_cpu(*(u32 *)urb->transfer_buffer);
+
+			/* Notify clients about changes */
+			if (data & SCARLETT2_USB_INTERRUPT_VOL_CHANGE)
+					scarlett2_mixer_interrupt_vol_change(mixer);
+			if (data & SCARLETT2_USB_INTERRUPT_LINE_CTL_CHANGE)
+					scarlett2_mixer_interrupt_line_in_ctl_change(mixer);
+			if (data & SCARLETT2_USB_INTERRUPT_BUTTON_CHANGE)
+					scarlett2_mixer_interrupt_button_change(mixer);
+			if (data & SCARLETT2_USB_INTERRUPT_SPEAKER_CHANGE) {
+					scarlett2_mixer_interrupt_speaker_change(mixer);
+					scarlett2_mixer_interrupt_vol_change(mixer);
+					scarlett2_mixer_interrupt_button_change(mixer);
+			}
 	} else {
-		usb_audio_err(mixer->chip, "scarlett mixer interrupt length %d\n", len);
+			usb_audio_err(mixer->chip, "scarlett mixer interrupt length %d\n", len);
 	}
 
 requeue:
